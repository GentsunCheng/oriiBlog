<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>orii博客</title>
  
  <subtitle>GentsunCheng的个人博客</subtitle>
  <link href="https://blog.orii.xyz/atom.xml" rel="self"/>
  
  <link href="https://blog.orii.xyz/"/>
  <updated>2023-01-22T06:58:31.804Z</updated>
  <id>https://blog.orii.xyz/</id>
  
  <author>
    <name>Gentsun</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>使用cloudflare Worker代理telegram bot api</title>
    <link href="https://blog.orii.xyz/202301/%E4%BD%BF%E7%94%A8cloudflare-Worker%E4%BB%A3%E7%90%86telegram-bot-api/"/>
    <id>https://blog.orii.xyz/202301/%E4%BD%BF%E7%94%A8cloudflare-Worker%E4%BB%A3%E7%90%86telegram-bot-api/</id>
    <published>2023-01-22T06:05:16.000Z</published>
    <updated>2023-01-22T06:58:31.804Z</updated>
    
    
    
    
    <category term="Web" scheme="https://blog.orii.xyz/categories/Web/"/>
    
    <category term="CDN" scheme="https://blog.orii.xyz/categories/Web/CDN/"/>
    
    
    <category term="Web" scheme="https://blog.orii.xyz/tags/Web/"/>
    
    <category term="CDN" scheme="https://blog.orii.xyz/tags/CDN/"/>
    
    <category term="Telegram" scheme="https://blog.orii.xyz/tags/Telegram/"/>
    
    <category term="Cloudflare" scheme="https://blog.orii.xyz/tags/Cloudflare/"/>
    
  </entry>
  
  <entry>
    <title>RSS介绍+为你的Hexo博客添加RSS</title>
    <link href="https://blog.orii.xyz/202301/RSS%E4%BB%8B%E7%BB%8D-%E4%B8%BA%E4%BD%A0%E7%9A%84Hexo%E5%8D%9A%E5%AE%A2%E6%B7%BB%E5%8A%A0RSS/"/>
    <id>https://blog.orii.xyz/202301/RSS%E4%BB%8B%E7%BB%8D-%E4%B8%BA%E4%BD%A0%E7%9A%84Hexo%E5%8D%9A%E5%AE%A2%E6%B7%BB%E5%8A%A0RSS/</id>
    <published>2023-01-22T06:03:59.000Z</published>
    <updated>2023-01-22T08:30:45.025Z</updated>
    
    <content type="html"><![CDATA[<h1 id="RSS介绍"><a href="#RSS介绍" class="headerlink" title="RSS介绍"></a>RSS介绍</h1><p>暂时略~~~</p><h1 id="为Hexo添加RSS"><a href="#为Hexo添加RSS" class="headerlink" title="为Hexo添加RSS"></a>为Hexo添加RSS</h1><h2 id="hexo-generator-feed插件"><a href="#hexo-generator-feed插件" class="headerlink" title="hexo-generator-feed插件"></a>hexo-generator-feed插件</h2><p>在Hexo目录下使用如下指令安装RSS生成工具， <strong><code>hexo-generator-feed</code></strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm install hexo-generator-feed<br></code></pre></td></tr></table></figure><p>在 <strong><code>_config.yml</code></strong> 文件添加配置</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">feed:</span><br>    <span class="hljs-attr">type:</span> <span class="hljs-string">atom</span><br>    <span class="hljs-attr">path:</span> <span class="hljs-string">atom.xml</span><br>    <span class="hljs-attr">limit:</span> <span class="hljs-number">20</span><br>    <span class="hljs-attr">hub:</span><br>    <span class="hljs-attr">content:</span><br>    <span class="hljs-attr">content_limit:</span><br>    <span class="hljs-attr">content_limit_delim:</span> <span class="hljs-string">&#x27; &#x27;</span><br></code></pre></td></tr></table></figure><p>参数的含义：<br><code>type</code>: RSS的类型(<code>atom</code>&#x2F;<code>rss2</code>)<br><code>path</code>: 文件路径,默认是<code>atom.xml</code>&#x2F;<code>rss2.xml</code><br><code>limit</code>: 展示文章的数量,使用<code>0</code>或则<code>false</code>代表展示全部<br><code>hub</code>:<br><code>content</code>: 在RSS文件中是否包含内容 ,有3个值 <code>true/false</code>默认不填为<code>false</code><br><code>content_limit</code>: 指定内容的长度作为摘要,仅仅在上面content设置为false和没有自定义的描述出现<br><code>content_limit_delim</code>: 上面截取描述的分隔符,截取内容是以指定的这个分隔符作为截取结束的标志.在达到规定的内容长度之前最后出现的这个分隔符之前的内容,，防止从中间截断.<br>之后使用 <code>http(s)://你的博客地址/atom.xml #http(s)://你的博客地址/rss2.xml</code> 订阅</p><h2 id="主题自带（以Next主题为例）"><a href="#主题自带（以Next主题为例）" class="headerlink" title="主题自带（以Next主题为例）"></a>主题自带（以Next主题为例）</h2><p>在 <strong><code>Next</code></strong> 主题的 <strong><code>_config.yml</code></strong> 文件中有个 <strong>rss</strong> 的配置，直接设置为 <strong>true</strong><br>其他主题可在使用手册查看是否支持，如何开启</p>]]></content>
    
    
      
      
        
        
    <summary type="html"></summary>
        
      
    
    
    
    <category term="Web" scheme="https://blog.orii.xyz/categories/Web/"/>
    
    <category term="Blog" scheme="https://blog.orii.xyz/categories/Web/Blog/"/>
    
    <category term="RSS" scheme="https://blog.orii.xyz/categories/Web/Blog/RSS/"/>
    
    
    <category term="Web" scheme="https://blog.orii.xyz/tags/Web/"/>
    
    <category term="Blog" scheme="https://blog.orii.xyz/tags/Blog/"/>
    
    <category term="RSS" scheme="https://blog.orii.xyz/tags/RSS/"/>
    
  </entry>
  
  <entry>
    <title>Grub更改排序(不是默认启动项)</title>
    <link href="https://blog.orii.xyz/202301/Grub%E6%9B%B4%E6%94%B9%E6%8E%92%E5%BA%8F-%E4%B8%8D%E6%98%AF%E9%BB%98%E8%AE%A4%E5%90%AF%E5%8A%A8%E9%A1%B9/"/>
    <id>https://blog.orii.xyz/202301/Grub%E6%9B%B4%E6%94%B9%E6%8E%92%E5%BA%8F-%E4%B8%8D%E6%98%AF%E9%BB%98%E8%AE%A4%E5%90%AF%E5%8A%A8%E9%A1%B9/</id>
    <published>2023-01-19T03:42:31.000Z</published>
    <updated>2023-01-22T08:34:16.825Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>由于主要使用Windows，但按照常规方法设置grub默认启动项后，会(强)十(迫)分(症)影(受)响(不)美(了)观，所以，这篇文章给出更改grub排序的教程</p><h1 id="开始吧"><a href="#开始吧" class="headerlink" title="开始吧"></a>开始吧</h1><p>在 <strong><code>/etc/grub.d</code></strong> 目录中，脚本文件的文件名都是以数字开头，这确定了在执行 <strong><code>update-grub</code></strong> 时各文件内容被执行的顺序。找到<code>30_os-prober</code>这个文件，把<code>30_os-prober</code>这个文件名的数字30改为05到10之间的数字，比如改为<code>09_os-prober</code>，这样生成的<code>grub.cfg</code>的菜单项，windows的排序就会在ubuntu之前。<br><img src="/202301/Grub%E6%9B%B4%E6%94%B9%E6%8E%92%E5%BA%8F-%E4%B8%8D%E6%98%AF%E9%BB%98%E8%AE%A4%E5%90%AF%E5%8A%A8%E9%A1%B9/grubd.png" title="grub.d目录"><br>然后更新grub， <strong><code>sudo update-grub</code></strong> ,就可以看到，windows 已经排在了第一个的位置上<br><img src="/202301/Grub%E6%9B%B4%E6%94%B9%E6%8E%92%E5%BA%8F-%E4%B8%8D%E6%98%AF%E9%BB%98%E8%AE%A4%E5%90%AF%E5%8A%A8%E9%A1%B9/seq0.png" title="grub的排序"><br><img src="/202301/Grub%E6%9B%B4%E6%94%B9%E6%8E%92%E5%BA%8F-%E4%B8%8D%E6%98%AF%E9%BB%98%E8%AE%A4%E5%90%AF%E5%8A%A8%E9%A1%B9/seq1.png" title="grub的排序"></p>]]></content>
    
    
      
      
        
        
    <summary type="html"></summary>
        
      
    
    
    
    <category term="Linux" scheme="https://blog.orii.xyz/categories/Linux/"/>
    
    <category term="Grub" scheme="https://blog.orii.xyz/categories/Linux/Grub/"/>
    
    
    <category term="Linux" scheme="https://blog.orii.xyz/tags/Linux/"/>
    
    <category term="Grub" scheme="https://blog.orii.xyz/tags/Grub/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu签名内核</title>
    <link href="https://blog.orii.xyz/202301/Ubuntu%E7%AD%BE%E5%90%8D%E5%86%85%E6%A0%B8/"/>
    <id>https://blog.orii.xyz/202301/Ubuntu%E7%AD%BE%E5%90%8D%E5%86%85%E6%A0%B8/</id>
    <published>2023-01-18T03:45:14.000Z</published>
    <updated>2023-01-22T06:41:26.414Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言，起因"><a href="#前言，起因" class="headerlink" title="前言，起因"></a>前言，起因</h1><p>由于某些原因，电脑需要开启Secure Boot为了体验Linux Kernel 6.1的新特性(我也不知道要体验啥)，但Ubuntu官方还未签名新的Linux内核，于是决定自己签名内核。<br>这篇文章将带你了解如何在不关闭安全启动的情况下引导Linux内核(签名unsigned内核)</p><h1 id="了解Linux-Secure-Boot机制-基于Grub2"><a href="#了解Linux-Secure-Boot机制-基于Grub2" class="headerlink" title="了解Linux Secure Boot机制(基于Grub2)"></a>了解Linux Secure Boot机制(基于Grub2)</h1><p>安装Ubuntu时，官方会同时安装经过微软签名后的EFI文件，使得grub EFI能正确在开启安全启动的设备上启动，启动后，由grub引导内核。这时，由于grub经过安全启动，所以会验证内核是否签名，若未签名，则无法启动。</p><h1 id="安装未签名的内核"><a href="#安装未签名的内核" class="headerlink" title="安装未签名的内核"></a>安装未签名的内核</h1><p>从ubuntu官方的<a href="https://kernel.ubuntu.com/~kernel-ppa/mainline/" title="ubuntu kernel">内核源</a>选择你需要的内核，根据架构，下载对应的 <strong><code>linux-image-unsigned-xxx.deb</code></strong> 和 <strong><code>linux-modules-xxx.deb</code></strong><br><img src="/202301/Ubuntu%E7%AD%BE%E5%90%8D%E5%86%85%E6%A0%B8/kernel-page.png" title="官方内核下载界面"><br>然后终端转到下载目录使用如下指令安装内核</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">dpkg -i ./*.deb<br></code></pre></td></tr></table></figure><p>此时，内核还没签名，如果以新安装的内核启动，则会显示 <strong><code>无效的shim签名</code></strong> ，接下来我们开始签名内核</p><h1 id="生成MOK证书"><a href="#生成MOK证书" class="headerlink" title="生成MOK证书"></a>生成MOK证书</h1><p>选择一个位置存放你的证书，以后也许会用上<br>创建MOK证书，这里需要用到 <strong><code>openssl</code></strong> ，使用如下指令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">openssl req -newkey rsa:2048 -nodes -keyout MOK.key -new -x509 -sha256 -days 36500 -subj &quot;/CN=my Machine Owner Key/&quot; -out MOK.crt<br>openssl x509 -outform DER -in MOK.crt -out MOK.der<br></code></pre></td></tr></table></figure><p>将<code>der</code>格式证书转换为<code>pem</code>格式</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">openssl x509 -in MOK.der -inform DER -outform PEM -out MOK.pem<br></code></pre></td></tr></table></figure><p>向机器注册MOK证书，需要安装好工具 <strong><code>mokutil</code></strong> </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">mokutil -i MOK.der<br></code></pre></td></tr></table></figure><p><code>mokutil</code>会让你设置一个密码，等下会用上，但不重要，只用一次。<br>然后重启（你也可以选择全部设置好再重启），会进入<code>MokManner</code>界面，按照要求注册你的证书。</p><h1 id="签名内核"><a href="#签名内核" class="headerlink" title="签名内核"></a>签名内核</h1><p>需要用到<code>sbsign</code>工具</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo sbsign --key /var/lib/shim-signed/mok/MOK.priv --cert /var/lib/shim-signed/mok/MOK.pem /boot/vmlinuz-[KERNEL-VERSION]-generic --output /boot/vmlinuz-[KERNEL-VERSION]-generic.signed<br>sudo cp /boot/vmlinuz-[KERNEL-VERSION]-generic.signed /boot/vmlinuz-[KERNEL-VERSION]-generic &amp;&amp; sudo rm /boot/vmlinuz-[KERNEL-VERSION]-generic.signed<br></code></pre></td></tr></table></figure><p>更新grub</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo update-grub<br></code></pre></td></tr></table></figure><p>然后重启测试，一切顺利的话新的内核可以正常启动，有些情况会因为NVIDIA显卡驱动不适配无法启动，解决方法这里不过多阐述。</p>]]></content>
    
    
      
      
        
        
    <summary type="html"></summary>
        
      
    
    
    
    <category term="Linux" scheme="https://blog.orii.xyz/categories/Linux/"/>
    
    <category term="Ubuntu" scheme="https://blog.orii.xyz/categories/Linux/Ubuntu/"/>
    
    <category term="Kernel" scheme="https://blog.orii.xyz/categories/Linux/Kernel/"/>
    
    
    <category term="Ubuntu" scheme="https://blog.orii.xyz/tags/Ubuntu/"/>
    
    <category term="Linux Kernel" scheme="https://blog.orii.xyz/tags/Linux-Kernel/"/>
    
    <category term="Secure Boot" scheme="https://blog.orii.xyz/tags/Secure-Boot/"/>
    
  </entry>
  
  <entry>
    <title>Hexo站点收录</title>
    <link href="https://blog.orii.xyz/202301/Hexo%E7%AB%99%E7%82%B9%E6%94%B6%E5%BD%95/"/>
    <id>https://blog.orii.xyz/202301/Hexo%E7%AB%99%E7%82%B9%E6%94%B6%E5%BD%95/</id>
    <published>2023-01-18T01:40:49.000Z</published>
    <updated>2023-01-22T10:08:42.305Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>网站在没有提交搜索引擎收录之前，直接搜索你网站的内容是搜不到的，只有提交搜索引擎之后，搜索引擎才能收录你的站点，通过爬虫抓取你网站的东西，对于 hexo 博客来说，如果你是部署在 GitHub Pages，那么你是无法被百度收录的，因为 GitHub 禁止了百度爬虫，最常见的解决办法是双线部署到 Coding Pages 和 GitHub Pages</p><h1 id="查看网站是否被收录"><a href="#查看网站是否被收录" class="headerlink" title="查看网站是否被收录"></a>查看网站是否被收录</h1><p>首先我们可以输入 <strong><code>site:域名</code></strong> 来查看域名是否被搜索引擎收录，如下图所示，表示没有收录：<br><img src="/202301/Hexo%E7%AB%99%E7%82%B9%E6%94%B6%E5%BD%95/%E7%99%BE%E5%BA%A6%E6%94%B6%E5%BD%95.png" title="百度未收录"></p><h1 id="百度资源平台添加网站"><a href="#百度资源平台添加网站" class="headerlink" title="百度资源平台添加网站"></a>百度资源平台添加网站</h1><p>访问<a href="https://ziyuan.baidu.com/" title="百度搜索资源平台官网">百度搜索资源平台官网</a>，注册或者登陆百度账号，依次选择 <strong><code>用户中心</code></strong> - <strong><code>站点管理</code></strong> ，添加你的网站，但是不知道为什么始终验证失败，实在是无解，难怪百度搜不到专业的知识<br><img src="/202301/Hexo%E7%AB%99%E7%82%B9%E6%94%B6%E5%BD%95/%E6%B7%BB%E5%8A%A0%E7%AB%99%E7%82%B9.png" title="添加站点"><br>之后会让你验证网站所有权，提供三种验证方式：<br>文件验证：下载给定的文件，将其放到本地主题目录 source 文件夹，然后部署上去完成验证<br>HTML 标签验证：一般是给一个 meta 标签，放到首页 <strong><code>&lt;head&gt;</code></strong> 与 <strong><code>&lt;/head&gt;</code></strong> 标签之间即可完成验证</p><h1 id="提交百度搜索"><a href="#提交百度搜索" class="headerlink" title="提交百度搜索"></a>提交百度搜索</h1><p>百度提供了自动提交和手动提交两种方式，其中自动提交又分为主动推送、自动推送和 sitemap 三种方式，以下是官方给出的解释：</p><p>主动推送：最为快速的提交方式，推荐您将站点当天新产出链接立即通过此方式推送给百度，以保证新链接可以及时被百度收录<br>自动推送：是轻量级链接提交组件，将自动推送的 JS 代码放置在站点每一个页面源代码中，当页面被访问时，页面链接会自动推送给百度，有利于新页面更快被百度发现<br>sitemap：您可以定期将网站链接放到sitemap中，然后将sitemap提交给百度。百度会周期性的抓取检查您提交的sitemap，对其中的链接进行处理，但收录速度慢于主动推送<br>手动提交：如果您不想通过程序提交，那么可以采用此种方式，手动将链接提交给百度</p><h2 id="sitemap"><a href="#sitemap" class="headerlink" title="sitemap"></a>sitemap</h2><p>谷歌收录里面有写到<br>类似的方法<br><a href="#a1">点击跳转</a></p><h2 id="主动推送"><a href="#主动推送" class="headerlink" title="主动推送"></a>主动推送</h2><p>在博客根目录安装插件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm install hexo-baidu-url-submit --save<br></code></pre></td></tr></table></figure><p>然后在根目录 <strong><code>_config.yml</code></strong>  文件里写入以下配置：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">baidu_url_submit:</span><br>  <span class="hljs-attr">count:</span> <span class="hljs-number">1</span>               <span class="hljs-comment"># 提交最新的多少个链接</span><br>  <span class="hljs-attr">host:</span> <span class="hljs-string">blog.orii.xyz</span>    <span class="hljs-comment"># 在百度站长平台中添加的域名</span><br>  <span class="hljs-attr">token:</span> <span class="hljs-string">your_token</span>      <span class="hljs-comment"># 秘钥</span><br>  <span class="hljs-attr">path:</span> <span class="hljs-string">baidu_urls.txt</span>   <span class="hljs-comment"># 文本文档的地址， 新链接会保存在此文本文档里</span><br></code></pre></td></tr></table></figure><p>其中 <strong><code>token</code></strong> 可以在【链接提交】-【自动提交】-【主动推送】下面看到，接口调用地址最后面 <strong><code>token=xxx</code></strong><br><img src="/202301/Hexo%E7%AB%99%E7%82%B9%E6%94%B6%E5%BD%95/token.png" title="你的token"><br>同样是在根目录的 <strong><code>_config.yml</code></strong> 文件，url 要改为在百度站长平台添加的域名，也就是你网站的首页地址：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># URL</span><br><span class="hljs-attr">url:</span> <span class="hljs-string">https://blog.orii.xyz</span><br><span class="hljs-attr">root:</span> <span class="hljs-string">/</span><br><span class="hljs-attr">permalink:</span> <span class="hljs-string">:year/:month/:day/:title/</span><br></code></pre></td></tr></table></figure><p>然后，加入新的 deployer：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># Deployment</span><br><span class="hljs-comment">## Docs: https://hexo.io/docs/deployment.html</span><br><span class="hljs-attr">deploy:</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">type:</span> <span class="hljs-string">git</span><br>  <span class="hljs-attr">repository:</span><br>    <span class="hljs-attr">github:</span> <span class="hljs-string">git@github.com:TRHX/TRHX.github.io.git</span>  <span class="hljs-comment"># 这是原来的 github 配置</span><br>    <span class="hljs-attr">coding:</span> <span class="hljs-string">git@git.dev.tencent.com:TRHX/TRHX.git</span>   <span class="hljs-comment"># 这是原来的 coding 配置</span><br>  <span class="hljs-attr">branch:</span> <span class="hljs-string">master</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">type:</span> <span class="hljs-string">baidu_url_submitter</span>                         <span class="hljs-comment"># 这是新加的主动推送</span><br></code></pre></td></tr></table></figure><p>最后部署一遍即可实现主动推送</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">hexo g -d<br></code></pre></td></tr></table></figure><h1 id="提交谷歌搜索"><a href="#提交谷歌搜索" class="headerlink" title="提交谷歌搜索"></a>提交谷歌搜索</h1><p>提交谷歌搜索引擎比较简单，进入<a href="https://www.google.com/webmasters/tools/" title="谷歌站长平台">谷歌站长平台</a>，登录你的谷歌账号之后会让你验证网站所有权：<br>略~~~</p><div id="a1"></div><h2 id="sitemap-1"><a href="#sitemap-1" class="headerlink" title="sitemap"></a>sitemap</h2><p>首先我们要使用以下命令生成一个网站地图：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm install hexo-generator-sitemap --save     <br>npm install hexo-generator-baidu-sitemap --save<br></code></pre></td></tr></table></figure><p>同样是在根目录的 <strong><code>_config.yml</code></strong> 文件，url 要改为在站长平台添加的域名，也就是你网站的首页地址：<br>同样是在根目录的 <strong><code>_config.yml</code></strong> 文件，url 要改为在百度站长平台添加的域名，也就是你网站的首页地址：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># URL</span><br><span class="hljs-attr">url:</span> <span class="hljs-string">https://blog.orii.xyz</span><br><span class="hljs-attr">root:</span> <span class="hljs-string">/</span><br><span class="hljs-attr">permalink:</span> <span class="hljs-string">:year/:month/:day/:title/</span><br></code></pre></td></tr></table></figure><p>然后使用命令将网站部署上去</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">hexo g -d<br></code></pre></td></tr></table></figure><p>然后访问 <strong><code>你的首页/sitemap.xml</code></strong> 或者 <strong><code>你的首页/baidusitemap.xml</code></strong> 就可以看到网站地图了<br>其中 <strong><code>sitemap.xml</code></strong> 文件是搜索引擎通用的 sitemap 文件， <strong><code>baidusitemap.xml</code></strong> 是百度专用的 sitemap 文件</p><h2 id="提交"><a href="#提交" class="headerlink" title="提交"></a>提交</h2><p>提交谷歌收录比较简单，选择站点地图，将我们之前生成的 sitemap 提交就行了，过几分钟刷新一下看到成功字样表示提交成功！<br><img src="/202301/Hexo%E7%AB%99%E7%82%B9%E6%94%B6%E5%BD%95/sitemap.png" title="sitemap"></p><h1 id="提交必应收录"><a href="#提交必应收录" class="headerlink" title="提交必应收录"></a>提交必应收录</h1><p>必应收录也是很简单，进入<a href="https://www.bing.com/webmaster/home/mysites" title="必应站长">必应站长</a>。注册或登录，必应收录有两种方式，一种使用刚刚谷歌导入过去，第二种是就是自己添加URL<br><img src="/202301/Hexo%E7%AB%99%E7%82%B9%E6%94%B6%E5%BD%95/bing.png" title="bing导入站点"><br>之后，你可以提交站点地图，bing的站点地图提交后会马上抓取。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>各大搜索引擎的站点提交都大差不差，原理和操作流程都差不多，可以使用类似方法提交。</p>]]></content>
    
    
      
      
        
        
    <summary type="html"></summary>
        
      
    
    
    
    <category term="Web" scheme="https://blog.orii.xyz/categories/Web/"/>
    
    <category term="Blog" scheme="https://blog.orii.xyz/categories/Web/Blog/"/>
    
    <category term="SEO" scheme="https://blog.orii.xyz/categories/Web/Blog/SEO/"/>
    
    
    <category term="Web" scheme="https://blog.orii.xyz/tags/Web/"/>
    
    <category term="Blog" scheme="https://blog.orii.xyz/tags/Blog/"/>
    
    <category term="SEO" scheme="https://blog.orii.xyz/tags/SEO/"/>
    
  </entry>
  
  <entry>
    <title>第一篇博客，hexo+GitHub搭建</title>
    <link href="https://blog.orii.xyz/202211/%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2%EF%BC%8Chexo-GitHub%E6%90%AD%E5%BB%BA/"/>
    <id>https://blog.orii.xyz/202211/%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2%EF%BC%8Chexo-GitHub%E6%90%AD%E5%BB%BA/</id>
    <published>2022-11-03T06:39:10.000Z</published>
    <updated>2023-01-22T11:31:29.940Z</updated>
    
    <content type="html"><![CDATA[<h1 id="个人博客搭建，hexo-github"><a href="#个人博客搭建，hexo-github" class="headerlink" title="个人博客搭建，hexo+github"></a>个人博客搭建，hexo+github</h1><h2 id="前言与准备："><a href="#前言与准备：" class="headerlink" title="前言与准备："></a>前言与准备：</h2><h3 id="准备好一个GitHub账号"><a href="#准备好一个GitHub账号" class="headerlink" title="准备好一个GitHub账号"></a>准备好一个GitHub账号</h3><p>创建方法略</p><h3 id="安装nodejs"><a href="#安装nodejs" class="headerlink" title="安装nodejs"></a>安装nodejs</h3><p>略，官网安装</p><h3 id="安装hexo等环境"><a href="#安装hexo等环境" class="headerlink" title="安装hexo等环境"></a>安装hexo等环境</h3><p>命令行输入以下指令进行安装  </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm install -g hexo-cli hexo-deployer-git<br></code></pre></td></tr></table></figure><p>准备工作完成  </p><h2 id="Github设置"><a href="#Github设置" class="headerlink" title="Github设置"></a>Github设置</h2><h3 id="GitHub创建个人仓库"><a href="#GitHub创建个人仓库" class="headerlink" title="GitHub创建个人仓库"></a>GitHub创建个人仓库</h3><p>登录到GitHub,如果没有GitHub帐号，使用你的邮箱注册GitHub帐号：Build software better, together 点击GitHub中的New repository创建新仓库  </p><h3 id="绑定个人域名-可选"><a href="#绑定个人域名-可选" class="headerlink" title="绑定个人域名(可选)"></a>绑定个人域名(可选)</h3><p>点击创建好的仓库，依次点击 <strong><code>Settings &gt; Pages</code></strong>,在 <strong><code>Custom domain</code></strong> 填入域名，点击 <strong><code>save</code></strong> 保存<br>在你的域名服务商添加CNAME记录, <strong><code>&lt;你的GitHub名字&gt;.github.io</code></strong> ，等待解析生效。打开Enforce HTTPS选项(可选，建议)<br><img src="/202211/%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2%EF%BC%8Chexo-GitHub%E6%90%AD%E5%BB%BA/gitdomain.png" title="Github域名设置"><br>也可以使用vercel等加速你的博客(可选，略，目前我用的就是vercel)  </p><h2 id="hexo的使用"><a href="#hexo的使用" class="headerlink" title="hexo的使用"></a>hexo的使用</h2><p>略(暂时?!)，可参照网上的各种帖子<br><a href="https://blog.csdn.net/yaorongke/article/details/119089190" title="GitHub+Hexo 搭建个人网站详细教程">搭建教程</a><br><a href="https://markdown.com.cn/" title="最好的markdown教程">Markdown语法</a></p>]]></content>
    
    
      
      
        
        
    <summary type="html"></summary>
        
      
    
    
    
    <category term="Web" scheme="https://blog.orii.xyz/categories/Web/"/>
    
    <category term="Blog" scheme="https://blog.orii.xyz/categories/Web/Blog/"/>
    
    
    <category term="Web" scheme="https://blog.orii.xyz/tags/Web/"/>
    
    <category term="Blog" scheme="https://blog.orii.xyz/tags/Blog/"/>
    
  </entry>
  
</feed>
